== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.


rails new --skip-turbolinks --skip-spring --skip-test-unit -d postgresql shine
createuser ​ ​ ​ ​--createdb ​ ​ ​ ​--login ​ ​ ​ ​-P ​ ​ ​ ​ shine


Trouble I had starting postgresql

-Error:
postgres createuser: could not connect to database postgres: could not connect to server: No such file or directory

Solution: brew info postgres
postgres -D /usr/local/var/postgres

Modify config/database.yml to connect to db
add the following under default:
host ​: ​ localhost
username ​: ​ shine
password ​: ​ shine

Time to setup our database:
bundle exec rake db:create
bundle exec rake db:migrate

Now start the rails server:
bundle exec rails server

Next:
Add Dashboard Controller

Add Devise
add gem 'devise' to gemfile
bundle install
bundle exec rails generate devise:install
bundle exec rails generate devise user (this creates a user Active Record Model users)

Set all pages to restricted
In application_controller.rb add the following line:
before_action :authenticate_user!

Let's see it work:
add the following line to index.html.erb in dashboard to see the currently logged in user
<%= current_user.email%>

Run a db migration
bundle exec rake db:migrate

Run the server again and localhost:3000 no longer shows dashboard page but asks us to sign up or login.

Setup Bower:
npm install -g bower
Add gem 'bower-rails' to gem file and run bundle install
List out bower rake tasks:
bundle exec rake -T bower

Create Bowerfile in root directory and add the following asset:
asset 'bootstrap-sass-official'

Install Dependencies with Bower
bundle exec rake bower:install

Configure application.css
Add the following line to app/assets/stylesheets/application.css
 *=require 'bootstrap-sass-official'


Extract Devise Views so we can edit them
bundle exec rails generate devise:views

Add Logout Link to the index page (dashboard/index.html.erb)
<% = ​ link_to ​" Log Out" ​, destroy_user_session_path, ​ method: :delete ​ ​% >

Apply a Bootstrap "container" (app/views/layouts/application.html.erb)
<body class="container">...

-Modified Devise forms to use bootstrap by setting div tags to form-group and elements to class: "form-control"

-Fuzzy Search Section
-add customer model
-add faker gem to generate seed data

Generating Seed Data
-look at db/seeds.rb file


Build Search UI
1.  Add Route to config/routes.rb
      resources :customers, only: [:index]
2.  Add Controller (app/controllers/customers_controller.rb)
3.  Add View (app/views/customers/index.html.erb)


Setting Up Angular Within Rails App
1.  Add angular to Bower file
      asset 'angular', '~ > 1.5'
      resolution 'angular', '1.5'  (resolution ensures predictability for what version of angular to get)
Then run bundle exe rake bower:install

2.  Add it to asset/pipeline (app/assets/javascripts/application.js)
//= require angular


Setting Up Rails Rspec
1.  Add rails-rspec ~> 3.0 to Gemfile
2.  RSpec Generators:
    bundle exec rails g rspec:install
3.  RSpec Configuration - spec/spec_helper.rb



Setting Up Jasmine
1.  Add gem 'teaspoon-jasmine'
2.  bundle exec rails generate teaspoon:install --no-coffee
3.  Add a sample spec (spec/javascripts/dummy_spec.js)
4.  Run Javascript tests:
    bundle exec rake teaspoon

Add Angular Router
  1.  Add asset 'angular-route' to Bowerfile
  2.  Add //=require angular-route to application.js

Open up DBConsole
rails dbconsole


Update Refresh materialized views
bundle exec rake refresh_materialized_views

Reset Test Database
rm db/schema.rb
be rake db:migrate
RAILS_ENV=test be rake db:drop
RAILS_ENV=test be rake db:create
